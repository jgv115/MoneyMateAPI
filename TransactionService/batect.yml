project_name: moneymate_api

.aws_creds_envs: &aws_creds_envs
  AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-}
  AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-}
  AWS_REGION: ${AWS_REGION:-}

.local_dev_envs: &local_dev_envs
  AWS__AccessKey: test,
  AWS__SecretKey: test,
  AWS__Region: ap-southeast-2
  AWS__LocalMode: "true"
  AWS__ServiceUrl: "http://localstack:4566"
  GooglePlaceApi__PlaceDetailsBaseUri: "http://google_api_mock:5000"
  CockroachDb__ConnectionString: "Host=cockroachdb;Port=26257;SSL Mode=Disable;Username=root;Database=moneymate_db_local;Server Compatibility Mode=NoTypeLoading;"

containers:
  dotnet_build_env:
    image: mcr.microsoft.com/dotnet/sdk:6.0.101
    environment:
      ASPNETCORE_URLS: http://*:5000
      ASPNETCORE_ENVIRONMENT: dev
      <<: *local_dev_envs
    ports:
      - container: 5000
        local: 5000
    volumes:
      - local: .
        container: /code
        options: cached
      - type: cache
        name: nuget-cache
        container: /home/container-user/.nuget
    working_directory: /code
    run_as_current_user:
      enabled: true
      home_directory: /home/container-user
  
  dotnet_run_env:
    image: mcr.microsoft.com/dotnet/sdk:6.0.101
    environment:
      ASPNETCORE_URLS: http://*:5000
      ASPNETCORE_ENVIRONMENT: dev
      <<: *local_dev_envs
    ports:
      - container: 5000
        local: 5000
    volumes:
      - local: .batect/dotnet_run_env/app
        container: /app
        options: cached
    working_directory: /app
    entrypoint: dotnet TransactionService.dll
  
  terraform_env:
    image: hashicorp/terraform:latest
    environment:
      <<: *aws_creds_envs
      TF_WORKSPACE: $ENVIRONMENT
      TF_VAR_TRANSACTION_SERVICE_LAMBDA_IMAGE_TAG: $IMAGE_TAG
      TF_VAR_CLOUDFLARE_EMAIL: $CLOUDFLARE_EMAIL
      TF_VAR_CLOUDFLARE_API_KEY: $CLOUDFLARE_API_KEY
    volumes:
      - local: .
        container: /code
        options: cached
    working_directory: /code/infra

  localstack:
    image: localstack/localstack:1.3.0
    environment:
      SERVICES: dynamodb,ssm
      AWS_ACCESS_KEY_ID: fake
      AWS_SECRET_ACCESS_KEY: fake
      DYNAMODB_SHARE_DB: 1
    volumes:
      - local: ./.batect/localstack/localstack-bootstrap.sh
        container: /docker-entrypoint-initaws.d/localstack-bootstrap.sh
      - local: ./.batect/localstack/healthcheck.sh
        container: /app/healthcheck.sh
    ports:
      - local: 4566
        container: 4566
    health_check:
      command: /app/healthcheck.sh
      interval: 3s
      retries: 5
      start_period: 10s
      timeout: 10s
  
  localstack_clean:
    additional_hostnames:
      - localstack
    image: localstack/localstack:2.2.0
    environment:
      SERVICES: dynamodb,ssm
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      DYNAMODB_SHARE_DB: 1
    volumes:
      - local: ./.batect/localstack_clean/healthcheck.sh
        container: /app/healthcheck.sh
    ports:
      - local: 4566
        container: 4566
    health_check:
      command: /app/healthcheck.sh
      interval: 3s
      retries: 5
      start_period: 10s
      timeout: 10s
  
  cockroachdb:
    image: cockroachdb/cockroach:v22.2.6
    ports:
      - local: 26257
        container: 26257
      - local: 8080
        container: 8080
    environment:
      COCKROACH_DATABASE: moneymate_db_local
    health_check:
      command: curl -f http://localhost:8080/health?ready=1
      interval: 1s
      timeout: 3s
      retries: 5
    command: start-single-node --insecure
  
  cockroachdb_migrated:
    image: flyway/flyway:9.16
    dependencies:
      - cockroachdb
    volumes:
      - local: ./sql
        container: /flyway/sql
    command: -url=jdbc:postgresql://cockroachdb:26257/moneymate_db_local -user=root -connectRetries=3 migrate

  flyway:
    image: flyway/flyway:9.21
    volumes:
      - local: ./sql
        container: /flyway/sql
    environment:
      FLYWAY_URL: ${COCKROACH_DB_URL:-jdbc:postgresql://host.docker.internal:26257/moneymate_db_local}
      FLYWAY_USER: ${COCKROACH_DB_USER:-root}
      FLYWAY_PASSWORD: ${COCKROACH_DB_PASSWORD:-}
    command: -connectRetries=60 migrate
  
  google_api_mock:
    build_directory: .batect/google_api_mock
    environment:
      FLASK_DEBUG: 1
    ports:
      - local: 6001
        container: 5000
  
  wait:
    image: alpine:latest

tasks:
  run_flyway_migration:
    run:
      container: flyway
  
  start_clean_environment:
    description: Spins up all of the dependencies without performing any initialising actions
    dependencies:
      - localstack_clean
      - cockroachdb
      - google_api_mock
    run:
      container: wait
      command: tail -f /dev/null

  start_debug_environment:
    description: Spins up all of the dependencies and perform any initialising actions
    dependencies:
      - localstack_clean
      - cockroachdb_migrated
      - google_api_mock
    run:
      container: wait
      command: tail -f /dev/null
  
  start_dependencies:
    description: WIP - Spins up all of the dependencies, perform initialising actions and inject data to run service locally
    dependencies:
      - localstack
      - cockroachdb_migrated
      - google_api_mock
    run:
      container: wait
      command: tail -f /dev/null
  
  unit_tests:
    description: Runs the unit tests
    run:
      container: dotnet_build_env
      command: dotnet test test/TransactionService.Tests

  integration_tests:
    description: Runs integration tests
    dependencies:
      - localstack_clean
      - cockroachdb_migrated
      - google_api_mock
    run:
      container: dotnet_build_env
      command: dotnet test test/TransactionService.IntegrationTests -l "console;verbosity=normal"

  build:
    description: Builds the Transaction Service
    run:
      container: dotnet_build_env
      command: dotnet build src/TransactionService/TransactionService.csproj -o .batect/dotnet_run_env/app
      
  run:
    description: Runs the Transaction Service
    prerequisites:
      - build
    dependencies:
      - localstack
    run:
      container: dotnet_run_env

  terraform_plan:
    description: Runs terraform plan
    group: Terraform
    run:
      container: terraform_env
      entrypoint: ../scripts/plan_terraform.sh

  terraform_apply:
    description: Runs terraform apply
    group: Terraform
    run:
      container: terraform_env
      entrypoint: ../scripts/apply_terraform.sh